searchState.loadedDescShard("redstone", 0, "RedStone\nAggregates values from a collection of data packages …\nConfiguration for a RedStone payload processor.\nThe current block time in timestamp format, used for …\nIdentifiers for the data feeds from which values are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum number of signers required validating the data.\nList of identifiers for signers authorized to sign the …\nThe main processor of the RedStone payload.\nRepresents the result of processing the RedStone payload.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum timestamp encountered during processing.\nA collection of values processed during the operation.\nA trait defining validation operations for data feeds and …\nRetrieves the index of a given data feed.\nRetrieves the index of a given signer.\nValidates the signer count threshold for a given index …\nValidates the timestamp for a given index.\nUsed when an expected non-empty array or vector is found …\nRepresents errors that need to clone <code>ContractErrorContent</code>, …\nRepresents errors that arise from the contract itself.\nRepresents errors related to cryptographic operations.\nErrors that can be encountered in the …\nIndicates that the number of signers does not meet the …\nUsed when there is leftover data in a payload that should …\nIndicates an overflow error with <code>U256</code> numbers.\nSignifies that an unsupported size was encountered.\nIndicates that a timestamp is further in the future than …\nUsed when a timestamp is older than allowed by the …\nIndicates that the marker bytes for RedStone are incorrect.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")